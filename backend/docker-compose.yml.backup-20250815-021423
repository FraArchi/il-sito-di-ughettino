version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ugo-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-ugo_ai_db}
      POSTGRES_USER: ${POSTGRES_USER:-ugo_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-ugo_secure_password_2024}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - ugo-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-ugo_user} -d ${POSTGRES_DB:-ugo_ai_db}"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 512M

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ugo-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_secure_password_2024} --maxmemory 1gb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - ugo-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1.5G
        reservations:
          memory: 256M

  # AI Model Service (llama.cpp server)
  model-service:
    build:
      context: .
      dockerfile: Dockerfile.model
    container_name: ugo-model-service
    environment:
      - MODEL_PATH=/app/models/mistral-7b-instruct-v0.1.Q4_K_M.gguf
      - MODEL_THREADS=${MODEL_THREADS:-8}
      - MODEL_CONTEXT_SIZE=${MODEL_CONTEXT_SIZE:-4096}
      - MODEL_GPU_LAYERS=${MODEL_GPU_LAYERS:-0}
    volumes:
      - ./models:/app/models:ro
      - model_cache:/app/cache
    ports:
      - "8080:8080"
    networks:
      - ugo-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 45s
      timeout: 15s
      retries: 3
      start_period: 120s
    depends_on:
      - redis
    deploy:
      resources:
        limits:
          memory: 16G
          cpus: '8'
        reservations:
          memory: 8G
          cpus: '4'

  # Main Ugo API Service
  ugo-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ugo-api
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DATABASE_URL=postgresql://${POSTGRES_USER:-ugo_user}:${POSTGRES_PASSWORD:-ugo_secure_password_2024}@postgres:5432/${POSTGRES_DB:-ugo_ai_db}
      - REDIS_URL=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis_secure_password_2024}
      - MODEL_SERVICE_URL=http://model-service:8080
      - JWT_SECRET=${JWT_SECRET:-ugo_ai_super_secure_jwt_secret}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY:-UgoAI2024SecureKey32CharactersLong}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    ports:
      - "3000:3000"
    networks:
      - ugo-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      model-service:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '4'
        reservations:
          memory: 1G
          cpus: '2'

  # Nginx Reverse Proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: ugo-nginx
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./public:/var/www/html:ro
      - nginx_logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    networks:
      - ugo-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - ugo-api
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 128M

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: ugo-prometheus
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - ugo-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    depends_on:
      - ugo-api
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 512M

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: ugo-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
    ports:
      - "3001:3000"
    networks:
      - ugo-network
    restart: unless-stopped
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 256M

networks:
  ugo-network:
    driver: bridge
    name: ugo-ai-network

volumes:
  postgres_data:
    name: ugo_postgres_data
  redis_data:
    name: ugo_redis_data
  model_cache:
    name: ugo_model_cache
  prometheus_data:
    name: ugo_prometheus_data
  grafana_data:
    name: ugo_grafana_data
  nginx_logs:
    name: ugo_nginx_logs
