version: '3.8'
services:
  # Main Backend Application
  ugo-backend:
    build: .
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/ugo_db
      - REDIS_URL=redis://redis:6379
      - OLLAMA_URL=http://ollama:11434
      - TTS_URL=http://coqui-tts:5002
      - SD_URL=http://stable-diffusion:7860
    depends_on:
      - postgres
      - redis
      - ollama
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    restart: unless-stopped
    
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ugo_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    
  # Redis Cache & Sessions
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    
  # Ollama AI Language Model (Local LLM)
  ollama:
    image: ollama/ollama:latest
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_MODELS=llama3.1:8b
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_ORIGINS=*
    command: |
      sh -c "
        ollama serve &
        sleep 10 &&
        ollama pull llama3.1:8b &&
        wait
      "
    deploy:
      resources:
        limits:
          memory: 8G
        reservations:
          memory: 4G
    restart: unless-stopped
    
  # Coqui TTS (Open Source Text-to-Speech)
  coqui-tts:
    build: 
      context: ./docker/coqui-tts
      dockerfile: Dockerfile
    ports:
      - "5002:5002"
    volumes:
      - tts_models:/models
      - tts_cache:/cache
    environment:
      - MODEL_PATH=/models/tts_model.pth
      - CACHE_PATH=/cache
    restart: unless-stopped
    
  # Stable Diffusion (Open Source Image Generation)
  stable-diffusion:
    build:
      context: ./docker/stable-diffusion
      dockerfile: Dockerfile
    ports:
      - "7860:7860"
    volumes:
      - sd_models:/models
      - sd_outputs:/outputs
    environment:
      - MODEL_PATH=/models
      - OUTPUT_PATH=/outputs
      - CUDA_VISIBLE_DEVICES=0
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    restart: unless-stopped
    
  # MediaPipe Face/Object Detection Service
  mediapipe-service:
    build:
      context: ./docker/mediapipe
      dockerfile: Dockerfile
    ports:
      - "5003:5003"
    volumes:
      - mediapipe_cache:/cache
    environment:
      - CACHE_PATH=/cache
    restart: unless-stopped
    
  # Nginx Reverse Proxy & Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
      - ./public:/var/www/html
    depends_on:
      - ugo-backend
    restart: unless-stopped
    
  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: unless-stopped
    
  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  ollama_data:
  tts_models:
  tts_cache:
  sd_models:
  sd_outputs:
  mediapipe_cache:
  prometheus_data:
  grafana_data:

networks:
  default:
    driver: bridge
